{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---------------\n",
    "\n",
    "**If any part of this notebook is used in your research, please cite with the reference found in** **[README.md](https://github.com/pysal/spaghetti#bibtex-citation).**\n",
    "\n",
    "\n",
    "----------------\n",
    "\n",
    "## Network-constrained spatial autocorrelation\n",
    "### Performing and visualizing ESDA\n",
    "\n",
    "**Author: James D. Gaboardi** **<jgaboardi@gmail.com>**\n",
    "\n",
    "**This notebook is an advanced walk-through for:**\n",
    "\n",
    "1. Demonstrating spatial autocorrelation with `pysal/esda`\n",
    "2. Understanding observation counts per network arc\n",
    "3. Visualizing spatial autocorrelation with `pysal/splot`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-04-27T17:01:00.124109Z",
     "start_time": "2020-04-27T17:00:59.697657Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2020-04-27T13:01:00-04:00\n",
      "\n",
      "CPython 3.7.3\n",
      "IPython 7.10.2\n",
      "\n",
      "compiler   : Clang 9.0.0 (tags/RELEASE_900/final)\n",
      "system     : Darwin\n",
      "release    : 19.4.0\n",
      "machine    : x86_64\n",
      "processor  : i386\n",
      "CPU cores  : 4\n",
      "interpreter: 64bit\n"
     ]
    }
   ],
   "source": [
    "%load_ext watermark\n",
    "%watermark"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-04-27T17:01:02.489398Z",
     "start_time": "2020-04-27T17:01:00.141009Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "watermark 2.0.2\n",
      "libpysal            4.2.2\n",
      "numpy               1.18.1\n",
      "splot               1.1.2\n",
      "matplotlib          3.1.2\n",
      "esda                2.2.1\n",
      "spaghetti           1.4.2.post2\n",
      "matplotlib_scalebar 0.6.1\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import esda\n",
    "import libpysal\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt########################\n",
    "import matplotlib_scalebar\n",
    "from matplotlib_scalebar.scalebar import ScaleBar\n",
    "import numpy\n",
    "import spaghetti\n",
    "import splot\n",
    "\n",
    "%matplotlib inline\n",
    "%watermark -w\n",
    "%watermark -iv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-04-27T17:01:02.509518Z",
     "start_time": "2020-04-27T17:01:02.496727Z"
    }
   },
   "outputs": [],
   "source": [
    "try:\n",
    "    from IPython.display import set_matplotlib_formats\n",
    "    set_matplotlib_formats(\"retina\")\n",
    "except ImportError:\n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---------------------------\n",
    "\n",
    "### ESDA â€” Exploratory Spatial Data Analysis\n",
    "\n",
    "#### "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Spatial Analysis with [pysal/esda](https://esda.readthedocs.io/en/latest/)\n",
    "\n",
    "#### 6.1 Moran's *I* using the digitized network"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-04-27T17:01:02.541215Z",
     "start_time": "2020-04-27T17:01:02.526369Z"
    }
   },
   "outputs": [],
   "source": [
    "## get the counter from segmentation notebook"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-04-27T17:01:02.558292Z",
     "start_time": "2020-04-27T17:01:02.544545Z"
    }
   },
   "outputs": [],
   "source": [
    "## Compute the counts\n",
    "#counts = ntw.count_per_link(ntw.pointpatterns[\"crimes\"].obs_to_arc, graph=False)\n",
    "#\n",
    "## Binary Adjacency\n",
    "#w = ntw.contiguityweights(graph=False)\n",
    "#\n",
    "## Build the y vector\n",
    "#arcs = w.neighbors.keys()\n",
    "#y = numpy.zeros(len(arcs))\n",
    "#\n",
    "#for i, a in enumerate(arcs):\n",
    "#    if a in counts.keys():\n",
    "#        y[i] = counts[a]\n",
    "#\n",
    "## Moran's I\n",
    "#res = esda.moran.Moran(y, w, permutations=99)\n",
    "#print(dir(res))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "code_folding": []
   },
   "source": [
    "#### 6.2 Moran's *I* using the graph representation to generate the *W*\n",
    "* Note that we have to regenerate the counts per arc, since the graph will have fewer edges."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-04-27T17:01:02.574482Z",
     "start_time": "2020-04-27T17:01:02.560823Z"
    }
   },
   "outputs": [],
   "source": [
    "## Compute the counts\n",
    "#counts = ntw.count_per_link(ntw.pointpatterns[\"crimes\"].obs_to_arc, graph=True)\n",
    "#\n",
    "## Binary Adjacency\n",
    "#w = ntw.contiguityweights(graph=True)\n",
    "#\n",
    "## Build the y vector\n",
    "#edges = w.neighbors.keys()\n",
    "#y = numpy.zeros(len(edges))\n",
    "#\n",
    "#for i, e in enumerate(edges):\n",
    "#    if e in counts.keys():\n",
    "#        y[i] = counts[e]\n",
    "#\n",
    "## Moran's I\n",
    "#res = esda.moran.Moran(y, w, permutations=99)\n",
    "#\n",
    "#print(dir(res))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 6.3 Moran's *I* using the segmented network and intensities instead of counts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-04-27T17:01:02.591589Z",
     "start_time": "2020-04-27T17:01:02.577647Z"
    }
   },
   "outputs": [],
   "source": [
    "## Compute the counts\n",
    "#counts = n200.count_per_link(n200.pointpatterns[\"crimes\"].obs_to_arc, graph=False)\n",
    "#\n",
    "## Binary Adjacency\n",
    "#w = n200.contiguityweights(graph=False)\n",
    "#\n",
    "## Build the y vector and convert from raw counts to intensities\n",
    "#arcs = w.neighbors.keys()\n",
    "#y = numpy.zeros(len(n200.arcs))\n",
    "#\n",
    "#for i, a in enumerate(arcs):\n",
    "#    if a in counts.keys():\n",
    "#        length = n200.arc_lengths[a]\n",
    "#        y[i] = float(counts[a]) / float(length)\n",
    "#\n",
    "## Moran's I\n",
    "#res = esda.moran.Moran(y, w, permutations=99)\n",
    "#\n",
    "#print(dir(res))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---------------------------\n",
    "\n",
    "### Visualizing ESDA with `splot`\n",
    "\n",
    "#### ...."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "-----------------"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:py3_spgh_dev]",
   "language": "python",
   "name": "conda-env-py3_spgh_dev-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
